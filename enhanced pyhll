from pywinauto import Application, Desktop
from PIL import Image
import pytesseract
import time

# Global state
_connected_window = None
_window_title = None
_cursor_row, _cursor_col = 1, 1  # start at top-left
_char_w, _char_h = 8, 16  # default estimates for character size
_screen_rows, _screen_cols = 24, 80  # fallback if detection fails

def _detect_screen_dimensions():
    global _screen_rows, _screen_cols, _char_w, _char_h
    if _connected_window:
        img = _connected_window.capture_as_image()
        width, height = img.size
        # Estimate character size if not standard
        _screen_cols = round(width / _char_w)
        _screen_rows = round(height / _char_h)

def connect_presentation_space(window_title: str):
    global _connected_window, _window_title
    _window_title = window_title
    app = Application(backend="win32").connect(title=window_title)
    _connected_window = app.window(title=window_title)
    _connected_window.set_focus()
    _detect_screen_dimensions()
    return True

def disconnect_presentation_space():
    global _connected_window
    _connected_window = None
    return True

def send_key(key: str):
    if _connected_window:
        key_map = {
            "ENTER": "{ENTER}", "TAB": "{TAB}", "HOME": "{HOME}", "BACKSPACE": "{BACKSPACE}",
            "PF1": "{F1}", "PF2": "{F2}", "PF3": "{F3}", "PF4": "{F4}", "PF5": "{F5}", "PF6": "{F6}",
            "PF7": "{F7}", "PF8": "{F8}", "PF9": "{F9}", "PF10": "{F10}", "PF11": "{F11}", "PF12": "{F12}"
        }
        _connected_window.type_keys(key_map.get(key.upper(), key))
        return True
    return False

def wait(seconds: float):
    time.sleep(seconds)

def copy_presentation_space():
    if _connected_window:
        img = _connected_window.capture_as_image()
        return pytesseract.image_to_string(img)
    return ""

def search_presentation_space(text: str):
    return text in copy_presentation_space()

def query_cursor_location():
    return (_cursor_row, _cursor_col)

def copy_position_to_string(row: int, col: int, length: int):
    if _connected_window:
        img = _connected_window.capture_as_image()
        width, height = img.size
        char_w = width // _screen_cols
        char_h = height // _screen_rows
        box = (
            (col - 1) * char_w,
            (row - 1) * char_h,
            (col - 1 + length) * char_w,
            row * char_h
        )
        cropped = img.crop(box)
        return pytesseract.image_to_string(cropped).strip()
    return ""

def copy_string_to_position(row: int, col: int, text: str):
    global _cursor_row, _cursor_col
    if _connected_window:
        _connected_window.set_focus()
        _connected_window.type_keys("{HOME}")
        for _ in range(row - 1):
            _connected_window.type_keys("{DOWN}")
        for _ in range(col - 1):
            _connected_window.type_keys("{RIGHT}")
        _connected_window.type_keys(text, with_spaces=True)
        _cursor_row, _cursor_col = row, col + len(text)
        return True
    return False

def set_cursor(row: int, col: int):
    global _cursor_row, _cursor_col
    _cursor_row, _cursor_col = row, col
    return copy_string_to_position(row, col, "")

def convert_position(row: int, col: int):
    return ((row - 1) * _screen_cols) + (col - 1)

def list_sessions():
    return [w.window_text() for w in Desktop(backend="win32").windows()]
